{"version":3,"sources":["components/ContactForm/ContactForm.module.css","components/ContactForm/ContactForm.js","components/ContactList/ContactList.js","components/Filter/Filter.js","App.js","reportWebVitals.js","index.js","components/ContactList/ContactList.module.css","components/Filter/Filter.module.css"],"names":["module","exports","ContactForm","nameInputId","uuidv4","telInputId","state","name","number","changeInput","e","inputName","currentTarget","setState","value","handleFormSubmit","preventDefault","Boolean","props","existContacts","find","element","alert","onFormSubmit","resetInput","this","onSubmit","className","s","contactForm","htmlFor","contactForm_label","contactForm_title","id","type","placeholder","contactForm_input","pattern","title","required","onChange","contactForm_button","Component","ContactList","contactsForList","onDeleteContact","contactList","map","contact","contactList_item","contactList_elem","contactList_button","onClick","Filter","onFilterValue","filter_title","filter_input","App","contacts","filter","addContact","contactData","deleteContact","contactId","prevState","changeFilter","event","getVisible","normalizedFilter","toLowerCase","includes","myContacts","localStorage","getItem","parsedContacts","JSON","parse","setItem","stringify","visibleContacts","length","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.86343218.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"contactForm\":\"ContactForm_contactForm__3X-KX\",\"contactForm_label\":\"ContactForm_contactForm_label__zE8tI\",\"contactForm_input\":\"ContactForm_contactForm_input__2-8Ky\",\"contactForm_title\":\"ContactForm_contactForm_title__3wtN3\",\"contactForm_button\":\"ContactForm_contactForm_button__EY_Mq\"};","import { Component } from \"react\";\r\nimport { v4 as uuidv4 } from \"uuid\";\r\nimport s from \"../ContactForm/ContactForm.module.css\";\r\n\r\nclass ContactForm extends Component {\r\n  nameInputId = uuidv4();\r\n  telInputId = uuidv4();\r\n\r\n  state = {\r\n    name: \"\",\r\n    number: \"\",\r\n  };\r\n\r\n  changeInput = (e) => {\r\n    const inputName = e.currentTarget.name;\r\n    this.setState({\r\n      [inputName]: e.currentTarget.value,\r\n    });\r\n  };\r\n\r\n  handleFormSubmit = (e) => {\r\n    e.preventDefault();\r\n    const checkContact = Boolean(\r\n      this.props.existContacts.find(\r\n        (element) => element.name === this.state.name\r\n      )\r\n    );\r\n\r\n    checkContact\r\n      ? alert(`${this.state.name} is already in contacts`)\r\n      : this.props.onFormSubmit(this.state);\r\n\r\n    this.resetInput();\r\n  };\r\n\r\n  resetInput = () => {\r\n    this.setState({ name: \"\", number: \"\" });\r\n  };\r\n\r\n  render() {\r\n    const { name, number } = this.state;\r\n    return (\r\n      <form onSubmit={this.handleFormSubmit} className={s.contactForm}>\r\n        <label htmlFor={this.nameInputId} className={s.contactForm_label}>\r\n          <span className={s.contactForm_title}>Name:</span>\r\n          <input\r\n            id={this.nameInputId}\r\n            type=\"text\"\r\n            name=\"name\"\r\n            placeholder=\"Enter contact name\"\r\n            className={s.contactForm_input}\r\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n            title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n            value={name}\r\n            required\r\n            onChange={this.changeInput}\r\n          />\r\n        </label>\r\n\r\n        <label htmlFor={this.telInputId} className={s.contactForm_label}>\r\n          <span className={s.contactForm_title}> Phone:</span>\r\n          <input\r\n            id={this.telInputId}\r\n            type=\"tel\"\r\n            name=\"number\"\r\n            placeholder=\"Enter contact phone\"\r\n            className={s.contactForm_input}\r\n            pattern=\"(\\+?( |-|\\.)?\\d{1,2}( |-|\\.)?)?(\\(?\\d{3}\\)?|\\d{3})( |-|\\.)?(\\d{3}( |-|\\.)?\\d{4})\"\r\n            title=\"Номер телефона должен состоять из 11-12 цифр и может содержать цифры, пробелы, тире, пузатые скобки и может начинаться с +\"\r\n            value={number}\r\n            required\r\n            onChange={this.changeInput}\r\n          />\r\n        </label>\r\n        <button type=\"submit\" className={s.contactForm_button}>\r\n          Add contact\r\n        </button>\r\n      </form>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ContactForm;\r\n","import { v4 as uuidv4 } from \"uuid\";\r\nimport PropTypes from \"prop-types\";\r\nimport s from \"../ContactList/ContactList.module.css\";\r\n\r\nconst ContactList = ({ contactsForList, onDeleteContact }) => (\r\n  <ul className={s.contactList}>\r\n    {contactsForList.map((contact) => (\r\n      <li key={uuidv4()} className={s.contactList_item}>\r\n        <span className={s.contactList_elem}> {contact.name}:</span>\r\n        <span>{contact.number} </span>\r\n        <button\r\n          type=\"button\"\r\n          className={s.contactList_button}\r\n          onClick={() => onDeleteContact(contact.id)}\r\n        >\r\n          Delete\r\n        </button>\r\n      </li>\r\n    ))}\r\n  </ul>\r\n);\r\n\r\nContactList.propTypes = {\r\n  contactsForList: PropTypes.arrayOf(\r\n    PropTypes.shape({\r\n      name: PropTypes.string.isRequired,\r\n      number: PropTypes.string.isRequired,\r\n    })\r\n  ).isRequired,\r\n};\r\n\r\nexport default ContactList;\r\n","import { v4 as uuidv4 } from \"uuid\";\r\nimport s from \"../Filter/Filter.module.css\";\r\n\r\nconst Filter = ({ onFilterValue, value }) => (\r\n  <>\r\n    <p className={s.filter_title}>Find contact</p>\r\n    <label htmlFor={uuidv4()} />\r\n    <input\r\n      className={s.filter_input}\r\n      id={uuidv4()}\r\n      type=\"text\"\r\n      placeholder=\"Find contact name\"\r\n      name=\"filter\"\r\n      onChange={onFilterValue}\r\n      value={value}\r\n    />\r\n  </>\r\n);\r\n\r\nexport default Filter;\r\n","import { Component } from \"react\";\n\nimport ContactForm from \"./components/ContactForm\";\nimport ContactList from \"./components/ContactList\";\nimport Filter from \"./components/Filter\";\n\nimport \"./index.css\";\n\nconst contactList = [\n  { id: \"id-1\", name: \"Rosie Simpson\", number: \"459-12-56\" },\n  { id: \"id-2\", name: \"Hermione Kline\", number: \"443-89-12\" },\n  { id: \"id-3\", name: \"Eden Clements\", number: \"645-17-79\" },\n  { id: \"id-4\", name: \"Annie Copeland\", number: \"227-91-26\" },\n];\n\nexport default class App extends Component {\n  state = {\n    contacts: contactList,\n\n    filter: \"\",\n  };\n\n  // сохранение в LocalStorage\n  componentDidMount() {\n    const myContacts = localStorage.getItem(\"My Contacts\");\n    const parsedContacts = JSON.parse(myContacts);\n\n    if (parsedContacts) {\n      this.setState({\n        contacts: parsedContacts,\n      });\n    } else {\n      this.setState({\n        contacts: contactList,\n      });\n    }\n  }\n  componentDidUpdate(prevState) {\n    if (prevState.contacts !== this.state.contacts) {\n      localStorage.setItem(\"My Contacts\", JSON.stringify(this.state.contacts));\n    }\n  }\n\n  addContact = ({ name, number }) => {\n    const contactData = {\n      name,\n      number,\n    };\n\n    this.setState(({ contacts }) => ({\n      contacts: [contactData, ...contacts],\n    }));\n  };\n  deleteContact = (contactId) => {\n    this.setState((prevState) => ({\n      contacts: prevState.contacts.filter(\n        (contacts) => contacts.id !== contactId\n      ),\n    }));\n  };\n\n  changeFilter = (event) => {\n    this.setState({\n      filter: event.currentTarget.value,\n    });\n  };\n\n  getVisible = () => {\n    const { filter, contacts } = this.state;\n    const normalizedFilter = filter.toLowerCase();\n\n    return contacts.filter((contacts) =>\n      contacts.name.toLowerCase().includes(normalizedFilter)\n    );\n  };\n\n  render() {\n    const { filter, contacts } = this.state;\n    const visibleContacts = this.getVisible();\n    return (\n      <div className=\"container\">\n        <h1 className=\"title\">Phonebook</h1>\n        <ContactForm onFormSubmit={this.addContact} existContacts={contacts} />\n        <Filter value={filter} onFilterValue={this.changeFilter} />\n\n        {contacts.length > 0 && (\n          <div>\n            <h2 className=\"subtitle\">Contacts</h2>\n            <ContactList\n              contactsForList={visibleContacts}\n              onDeleteContact={this.deleteContact}\n            />\n          </div>\n        )}\n      </div>\n    );\n  }\n}\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"contactList\":\"ContactList_contactList__2ilXp\",\"contactList_item\":\"ContactList_contactList_item__KqtVA\",\"contactList_elem\":\"ContactList_contactList_elem__2-rPx\",\"contactList_button\":\"ContactList_contactList_button__OCAo2\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"filter_title\":\"Filter_filter_title__rHtX_\",\"filter_input\":\"Filter_filter_input__3wB4Q\"};"],"sourceRoot":""}